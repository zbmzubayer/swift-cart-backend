generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ------------------------------------------------------
// Model Definition
// ------------------------------------------------------
enum Role {
  SuperAdmin
  Admin
  Customer
  Seller
}

enum Gender {
  Male
  Female
  Other
}

enum ProductStatus {
  New
  Used
  Refurbished
}

enum OrderStatus {
  Pending
  Processing
  Delivered
  Cancelled
  Refunded
  Failed
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  admin     Admin?
  customer  Customer?
  seller    Seller?

  @@index([createdAt])
  @@map("users")
}

model Admin {
  id        String   @id @default(uuid())
  image     String
  name      String
  phone     String   @unique
  gender    Gender
  dob       DateTime @db.Date
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map("admins")
}

model Customer {
  id        String    @id @default(uuid())
  image     String?
  name      String
  phone     String    @unique
  gender    Gender?
  dob       DateTime? @db.Date
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  orders    Order[]
  reviews   Review[]

  @@map("customers")
}

model Seller {
  id             String    @id @default(uuid())
  image          String
  name           String
  phone          String    @unique
  gender         Gender
  dob            DateTime  @db.Date
  address        String
  companyName    String    @unique
  companyLogo    String
  companyAddress String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @unique
  products       Product[]

  @@map("sellers")
}

model Product {
  id            String        @id @default(uuid())
  image         String
  url           String        @unique
  name          String
  description   String
  price         Float
  stock         Int
  soldCount     Int           @default(0)
  status        ProductStatus
  warranty      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subCategory   SubCategory   @relation(fields: [subCategoryId], references: [id])
  subCategoryId String
  seller        Seller        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId      String
  orderItems    OrderItem[]
  reviews       Review[]

  @@unique([name, sellerId]) // one seller can't have two products with same name
  @@index([subCategoryId, sellerId, createdAt])
  @@map("products")
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subCategories SubCategory[]

  @@map("categories")
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  products   Product[]

  @@index([categoryId])
  @@map("subCategories")
}

model Order {
  id          String      @id @default(uuid())
  code        String      @unique
  status      OrderStatus @default(Pending)
  phone       String
  address     String
  total       Float       @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deliveredAt DateTime?
  customer    Customer?   @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId  String?
  orderItems  OrderItem[]

  @@index([customerId, createdAt])
  @@map("orders")
}

model OrderItem {
  id         String   @id @default(uuid())
  quantity   Int
  orderPrice Float
  itemTotal  Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String

  @@index([orderId, productId, createdAt])
  @@map("orderItems")
}

model Review {
  id         String    @id @default(uuid())
  comment    String
  rating     Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  product    Product   @relation(fields: [productId], references: [id])
  productId  String
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId String?

  @@index([productId, customerId, createdAt])
  @@map("reviews")
}
